// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogEntry struct {
	Severity             int32    `protobuf:"varint,1,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Component            string   `protobuf:"bytes,2,opt,name=Component,proto3" json:"Component,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetSeverity() int32 {
	if m != nil {
		return m.Severity
	}
	return 0
}

func (m *LogEntry) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *LogEntry) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LogEntry) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "LogEntry")
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor_2bc2336598a3f7e0) }

var fileDescriptor_2bc2336598a3f7e0 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8e, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0x87, 0x8d, 0xeb, 0x9f, 0xed, 0x1c, 0x3c, 0xe4, 0x20, 0xa1, 0x7a, 0x28, 0x7b, 0xea, 0x29,
	0x2b, 0xee, 0x13, 0x88, 0xec, 0x6d, 0x7b, 0x69, 0x7d, 0x81, 0x56, 0xc6, 0x10, 0x68, 0x32, 0x21,
	0x19, 0x85, 0x82, 0x0f, 0x2f, 0x4d, 0xa9, 0xbd, 0xcd, 0xf7, 0xfb, 0x18, 0xf8, 0xe0, 0x21, 0x44,
	0x62, 0xfa, 0xa4, 0x51, 0xe7, 0xa3, 0x7c, 0x32, 0x44, 0x66, 0xc4, 0x63, 0xa6, 0xe1, 0xfb, 0xeb,
	0x88, 0x2e, 0xf0, 0xb4, 0xc8, 0xc3, 0x2f, 0xec, 0x2f, 0x64, 0xce, 0x9e, 0xe3, 0x24, 0x4b, 0xd8,
	0x77, 0xf8, 0x83, 0xd1, 0xf2, 0xa4, 0x44, 0x25, 0xea, 0xdb, 0xf6, 0x9f, 0xe5, 0x33, 0x14, 0xef,
	0xe4, 0x02, 0x79, 0xf4, 0xac, 0xae, 0x2b, 0x51, 0x17, 0xed, 0x36, 0xcc, 0xf6, 0xc3, 0x3a, 0x4c,
	0xdc, 0xbb, 0xa0, 0x76, 0x95, 0xa8, 0x77, 0xed, 0x36, 0x48, 0x05, 0xf7, 0x0d, 0xa6, 0xd4, 0x1b,
	0x54, 0x37, 0xf9, 0x73, 0xc5, 0xd7, 0x37, 0x80, 0x86, 0xbc, 0x65, 0x8a, 0xd6, 0x1b, 0x79, 0x02,
	0xe8, 0x38, 0x62, 0xef, 0x2e, 0x64, 0x92, 0x7c, 0xd4, 0x4b, 0xb7, 0x5e, 0xbb, 0xf5, 0x79, 0xee,
	0x2e, 0x0b, 0xbd, 0x06, 0x1f, 0xae, 0x5e, 0xc4, 0x70, 0x97, 0xf5, 0xe9, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0xeb, 0x8f, 0x76, 0xe2, 0xf6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonitoringClient is the client API for Monitoring service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitoringClient interface {
	StreamLogs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Monitoring_StreamLogsClient, error)
}

type monitoringClient struct {
	cc *grpc.ClientConn
}

func NewMonitoringClient(cc *grpc.ClientConn) MonitoringClient {
	return &monitoringClient{cc}
}

func (c *monitoringClient) StreamLogs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Monitoring_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Monitoring_serviceDesc.Streams[0], "/Monitoring/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoringStreamLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Monitoring_StreamLogsClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type monitoringStreamLogsClient struct {
	grpc.ClientStream
}

func (x *monitoringStreamLogsClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitoringServer is the server API for Monitoring service.
type MonitoringServer interface {
	StreamLogs(*empty.Empty, Monitoring_StreamLogsServer) error
}

// UnimplementedMonitoringServer can be embedded to have forward compatible implementations.
type UnimplementedMonitoringServer struct {
}

func (*UnimplementedMonitoringServer) StreamLogs(req *empty.Empty, srv Monitoring_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}

func RegisterMonitoringServer(s *grpc.Server, srv MonitoringServer) {
	s.RegisterService(&_Monitoring_serviceDesc, srv)
}

func _Monitoring_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServer).StreamLogs(m, &monitoringStreamLogsServer{stream})
}

type Monitoring_StreamLogsServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type monitoringStreamLogsServer struct {
	grpc.ServerStream
}

func (x *monitoringStreamLogsServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

var _Monitoring_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Monitoring",
	HandlerType: (*MonitoringServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _Monitoring_StreamLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol.proto",
}
