#!/usr/bin/env bash

checkDependencies ( ) {
  echo "Checking for NPM"
  if ! type "npm" > /dev/null; then
    echo "NPM not found, installing"
    if ! type "apt-get" > /dev/null
    then
        echo "Apt-get not found, cannot install npm!"
        exit 1
    fi
    apt-get install npm
  else
    echo "NPM found!"
  fi
}

cleanUp ( ) {
  echo "Cleaning up last build"
  rm -rf out
  rm -rf .build
  mkdir .build
}

buildBackend ( ) {
  echo "Building backend"
  pushd backend
    npm install .
    npm run build
	cp ./src/config.json ../.build/backend/config.json
    cp package.json ../.build/backend/package.json
    cp package-lock.json ../.build/backend/package-lock.json
  popd
}

buildFrontend ( ) {
  echo "Building frontend"
  pushd frontend
    npm install .
    npm run build
  popd
}

dist ( ) {
  echo "Building release"
  cp -r .build/backend out/
  cp -r .build/frontend out/web/
}

build ( ) {
  checkDependencies
  cleanUp
  buildBackend
  buildFrontend
  dist
}

install ( ) {
  build
  pushd out
    npm install . --production
  popd
}

run ( ) {
  install
  pushd out
    node main.js
  popd
}

help ( ) {
  echo "~~~~~~ Hopper build system ~~~~~~"
  echo "---- Core commands ----"
  echo "build - Builds the whole project"
  echo "install - Builds and installs the project"
  echo "run - Installs and runs the project"
  echo "---- Minor commands ----"
  echo "checkDependencies - Checks and installs required dependencies"
  echo "cleanUp - Cleans up last build"
  echo "buildBackend - Builds the backend"
  echo "buildFrontend - Builds the frontend"
  echo "dist - Packages the front- and backend"
}

if declare -f "$1" > /dev/null
then
  # call arguments verbatim
  "$@"
else
  # Show a helpful error
  if [ "$1" != "" ]; then
    echo "'$1' is not a known function name!" >&2
  fi
  help
fi
